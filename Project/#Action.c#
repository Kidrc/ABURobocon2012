#include "Action.h"

/*	
	收腿H
	放L
	打鱼竿H
	夹L
	放H
*/
/*
*	函数名：Action_Init
*	功能：对动作执行程序的初始化，包括：
*		PWM波初始化（舵机和H桥）
*		IO口初始化（动作执行部分）
*		机构回到初始位置
*	参数：无
*	返回值：无
*/

char F8_Enable = 1;
char F9_Enable = 1;
char F10_Enable = 1;
char D0_Enable = 1;

char elvtr_Arr = 0;
char elvtr_Man = 0;

char tar_Pos = 0;
char tar_Rolls = 1;

char elvtr_Dir = 0;
uint16_t init_Pos = 0;
 uint16_t rolls = 0;
 uint16_t pos = 0;

	
void Action_Init(void)
{
	LCD_Inform("Action");

	HBridge_Init();
	Sensor_Init();
	Relay_Init();
	Com_Init();
	AbsEncoder_Init();

	ARM_In();
	ARM_Up();
	TKN_Dispatch();
	Com_Off();

	while(!Sensor_Active(F8))
	{
		ELVTR_Up();
	}
	ELVTR_Stop();
	//PrdIT_Init();
	Delay(500);
	init_Pos = Read_AbsEncoder();
}
	  
void Com_Init(void)
{
	RCC_GPIOD();
	GPIO_Config(GPIO_Pin_7, GPIO_Mode_Out_PP, GPIO_Speed_50MHz, GPIOD);
}
void Sensor_Check(void)
{
	static unsigned char state = 0;

	LCD_Clear();

	LCD_Write(0, 0, "Check Sensor");

	state = Sensor_Active(F8) | Sensor_Active(F9)<<1 | Sensor_Active(F10)<<2 | Sensor_Active(D0)<<3 | Sensor_Active(D1)<<4 | Sensor_Active(F12) << 5;
 	
	LCD_Write_Int(0, 1, state);
}
/*
*	函数名：Elevator_Up
*	功能：让电梯上升
*		该函数必须先于Elevator_Down执行
*	参数：无
*	返回值：无
*/
void ELVTR_Up(void)
{
	Relay_Switch(6, OFF);
	
	HBridge_Ctrl(1, 1, 1, 95);

	elvtr_Dir = 0;
}

/*
*	函数名：Elevator_Down
*	功能：让电梯下降
*	参数：无
*	返回值：无
*/
void ELVTR_Down(void)
{
	Relay_Switch(6, OFF);
	
	HBridge_Ctrl(1, 1, 0, 70); 

	elvtr_Dir = 1;
}

void ELVTR_Up_Manual(void)
{
	Relay_Switch(6, OFF);

	HBridge_Ctrl(1, 1, 1, 60);
	elvtr_Dir = 0;
}

void ELVTR_Down_Manual(void)
{
	Relay_Switch(6, OFF);

	HBridge_Ctrl(1, 1, 0, 60);
	elvtr_Dir = 1;
}

void ELVTR_Up2(int speed)
{
	Relay_Switch(6, OFF);

	HBridge_Ctrl(1, 1, 1, speed);
}

void ELVTR_Down2(int speed)
{
	Relay_Switch(6, OFF);

	HBridge_Ctrl(1, 1, 1, speed);
}
/*
*	函数名：Elevator_Stop_Y
*	功能：让电梯在竖直方向上停止
*	参数：无
*	返回值：无
*/
void ELVTR_Stop(void)
{
	if (!elvtr_Man)
	{
		HBridge_Ctrl(1, 1, 0, 0);
		
		Relay_Switch(6, ON);

		elvtr_Arr = 1;
	}
}

/*
*	函数名：Elevator_Goto_Y
*	功能：让电梯竖直运动到指定位置
*		指定传感器触发
*	参数：elevator_Y y -- 指定位置
*	返回值：无
*/
void ELVTR_Goto(char y)
{
	switch(y)
	{
		case 1:
			tar_Rolls = 1;
		break;

		case 2:
			tar_Rolls = 9;
		break;

		case 3:
			tar_Rolls = 21;
		break;

		case 4:
			tar_Rolls = 26;
		break;

		case 5:
			tar_Rolls = 31;
		break;

		default:
		break;
	}
	elvtr_Arr = 0;
}

void ELVTR_Check(void)
{
	static uint16_t last_Pos = 0;

	last_Pos = pos;
	pos = Read_AbsEncoder();

	if (pos > last_Pos + 300 && elvtr_Dir == 0)
	{
		++rolls;
	}
	else if (pos + 300 < last_Pos && elvtr_Dir == 1)
	{
		--rolls;
	}

	if (!elvtr_Arr)
	{
		if (tar_Rolls > rolls)
		{
			ELVTR_Up();
		}
		else if (tar_Rolls < rolls)
		{
			ELVTR_Down();
		}
		else
		{
			ELVTR_Stop();
			elvtr_Arr = 1;
		}
	}
}
/*
void TKN_Scan(void)
{
	static uint8_t scanned = 0;
		
	if (!scanned && Sensor_Active(SENSOR_TOKEN))		  
	{
		TKN_Patch();

		scanned = 1;
	}
	
	if (scanned && !Sensor_Active(SENSOR_TOKEN))
	{
		TKN_Patch();
		ARM_In();
		
		scanned = 1;
	}					 
}
*/
void TKN_Patch(void)
{
	Relay_Switch(4, ON);
}

void TKN_Dispatch(void)
{
	Relay_Switch(4, OFF);
}
void ARM_Out(void)
{
	Relay_Switch(5, ON);
}

void ARM_In(void)
{
	Relay_Switch(5, OFF);
}

void ARM_Up(void)
{
	Relay_Switch(3, ON);
}

void ARM_Down(void)
{
	Relay_Switch(3, OFF);
}

void Com_On(void)
{
	GPIO_SetBits(GPIOD, GPIO_Pin_7);
}

void Com_Off(void)
{
	GPIO_ResetBits(GPIOD, GPIO_Pin_7);
}

void AbsEncoder_Init(void)
{
	RCC_GPIOE();
	
	GPIO_Config(GPIO_Pin_7, GPIO_Mode_IN_FLOATING, GPIO_Speed_50MHz, GPIOE);

	GPIO_Config(GPIO_Pin_2|GPIO_Pin_1|GPIO_Pin_0, GPIO_Mode_Out_PP, GPIO_Speed_50MHz, GPIOE);
	
	
	GPIO_SetBits(GPIOE, GPIO_Pin_0);
	GPIO_SetBits(GPIOE, GPIO_Pin_1);
	GPIO_SetBits(GPIOE, GPIO_Pin_2);
}
			
uint16_t Read_AbsEncoder(void)
{
	uint16_t abs_Data = 0;
	uint16_t dummy = 0;
	char i = 0;
	char state = 0;


	while(state != 16 && state != 17 && state != 18)
	{
		GPIO_ResetBits(GPIOE, GPIO_Pin_1);
		for (dummy = 0; dummy < 20; dummy++);

		for (i = 0; i < 32; ++i)
		{
			if (i % 2)
			{
				GPIO_ResetBits(GPIOE, GPIO_Pin_2);
			{
				GPIO_SetBits(GPIOE, GPIO_Pin_2);
			}
			for (dummy = 0; dummy < 10; dummy++);
	
	 		if (i % 2 != 0)
			{
				abs_Data <<= 1;
				abs_Data |= GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_7);
			} 
		}

		state = (abs_Data & 0x003E) >> 1;

		GPIO_SetBits(GPIOE, GPIO_Pin_1);
		for (dummy = 0; dummy < 20; dummy++);
	}

	abs_Data = (abs_Data & 0xFFC0) >> 6;


	return abs_Data;
}

void PrdIT_Init(void)
{
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_Structure;

	RCC_TIM7();

	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;		  	 
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = 100;
	TIM_TimeBaseStructure.TIM_Prescaler = 1199;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM7, &TIM_TimeBaseStructure);	
	
	TIM7->CNT = 0;
				
	TIM_ClearFlag(TIM7, TIM_FLAG_Update);  		
	
	NVIC_Structure.NVIC_IRQChannel = TIM7_IRQn;
	NVIC_Structure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Structure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_Structure.NVIC_IRQChannelSubPriority = 0;
	
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
	
	NVIC_Init(&NVIC_Structure);

	TIM_ITConfig(TIM7, TIM_IT_Update, ENABLE);

	TIM_Cmd(TIM7, ENABLE);	
}

void TIM7_IRQHandler(void)
{
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
}
	